nodejs.org	//pobierz najnowszą wersję razem z source
npm init	//tworzy nowy projekt node.js w twoim nowo-utworzonym katalogu
npmjs.org	//strona z modułami dostarczana przez publiczność. Tysiące modułów, oprócz tych które wchodzą w standardowy pakiet nodejs
npm install --save express	//instalacja modułu ze strony npmjs.org (save - musisz dodać aby zapisać, a nie tylko zainstalować)

var http = require('http'),
	express = require('express'); 	//podłączenie modułów: http i express

	var app = express();			//tworzenie nowej app na podstawie express

http.createServer(app).listen(3000);	//uruchomienie servera na porcie 3000 (localhost:3000)

sudo npm install -g express			//instalacja express w trybie golobalnego modułu

npm prune							//usuwa wszystkie moduły których nie używamy w aplikacji
npm update							//aktualizuje moduły, * w package.json oznacza że do najnowszej wersji

---------------------------------------------------------------------------------------------------------

1. zainstaluj nodejs
2. npm 							//instaluje pakiety
3. npm install -g bower			//menadżer bibliotek
4. npm install -g yo			//yoman generuje szablony projektów
5. npm install -g grunt-cli		// automatyzuje minifikację, łaczenie plików, wstrzykiwanie zależności, uruchamianie testów

//-------------------
//   	BOWER
//-------------------
bower help
bower search				//wyszukuje pakiety np. bower search angular
bower install angular		//instaluje biblioteki w bower_components
bower init					//tworzy projekt z zależnościami. Zostanie utworzony plik bower.json

Później można utworzyć repozytoria i klon projektu:
git init
.gitiore					//w tym pliku określ katalog bower_components jako pomijany przy komitowaniu
git add -A
git commit -A -m "Startowy commit"
git clone test test2		// klonowanie projektu (wcześniej wyjdź z tego katalogu)
Zostanie utworzony katalog test2 z plikami projektu, ale bez komponentówn (bower_components).
Ktoś komu zostanie przesłany projekt bez komponetów może samodzielnie ściągnąć te komponenty wpisując:
bower install				// musi jednak posiadać plik bower.json


//-------------------
//   	YOMAN
//-------------------
npm install -g yo		//instalacja yoman, generuje szablony projektów
W katalogu projektu np.test uruchamiamy konsolę i wpisujemy komendę: yo
szukamy potrzebnego dla nas generatora (jest ich tysiące) yoman.io w zakładce discovering generators są opisy
możemy wybrac np. angular, ionic i zainstalować.
generator przeprowadzi nas przez serię pytań

Do pliku bower.json dopisane zostaną zależności
Zostanie utworzony też plik package.json Pliki wykonawcze będą ściągnięte i zapisane w katalogu node_modules (npm install)

//-------------------
//   	GRUNT
//-------------------
npm install -g grunt-cli		//instalacja grunt-a
grunt serv						//uruchamia generacje tasków
grunt							//wygenerowanie gotowej aplikacji w katalogu dist

//Później też mozna wykonać git commit i klonowanie (patrz yoman)
//z test2 instalacja pakietów wygląda następująco:
npm install
bower install
grunt serve

//-------------------
//   	GULPJS
//-------------------
npm install gulp-cli -g				//instalacja gulpa
npm init							//najpierw przejdź do katalogu projektu, init tworzy package.json
npm install gulp --save-dev			//instalacja w projekcie, w node_modules pojawi się paczka: gulp
									//następnie tworzysz strukturę katalogów np. app, dist w app index.html, katalog css i katalog scss
									
		//w katalogu glównym projektu (tam gdzie znajduje się package.json) tworzysz plik gulpfile.js
		//W gulpfile.js zapisujesz taski czyli czynności do wykonania
var gulp = require('gulp');			//podłaczenie bibliotek gulp-a

gulp.task('task-name', function(){	//ogólna wzór wykonania tasku, czyli jakiegoś zadania
	//do something
});
gulp task-name;						//wywołanie funkcji, zadania z konsoli
//----------------------------- przykład z sass-em konwertowanym do css
1. W katalogu scss stwórz plik: styles.scss
2. zainstaluj plugin do obsługi plików scss
npm install gulp-sass --save-dev	//w node_modules pojawi sie paczka: gulp-sass
3. W pliku gulpfile.js dopisujesz:
var sass = require('gulp-sass');
gulp.task('sass', function(){
	return gulp.src('app/scss/styles.scss')
		.pipe(sass())
		.pipe(gulp.dest('app/css'))
});


npm search mobile app	//wszyszukiwanie pakietów npm lub patrz nipstr.com
npm ls --depth=0		//wyświetlenie zainstalowanych pakietów, można też depth=1
npm ls -g --depth=0		//wyświetlenie globalnych pakietów

npm help run			//pomoc dla komendy run
npm docs express		//dokumentacja dla express
npm repo express		//repozytoria dla express
package.json			//zawiera strony projektu, githuba, issues itp...

npm update express --save	//uaktualnienie paczek patrz package.json

